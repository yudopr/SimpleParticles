var particleSets = {active:false, id:''};
var timelines = [];

let snowParams = {
    count: 70,
    duration: {from:5, to:7},
    start:{
        x:{from:-10, to:310, repeat:-1, yoyo:1},
        y:{from:-50, to:-10, repeat:-1, yoyo:1},
        opacity:{from:0.3, to:0.5, repeat:-1, yoyo:1},
        scale:{from:1, to:1, repeat:-1, yoyo:1},
        rotation:{from:0, to:0, repeat:-1, yoyo:1},
        filter:{from:'', to:'', repeat:-1, yoyo:1}
    },
    end:{
        x:{from:50, to:250, repeat:-1, yoyo:1},
        y:{from:260, to:300, repeat:-1, yoyo:1},
        opacity:{from:0.3, to:0.5, repeat:-1, yoyo:1},
        scale:{from:1, to:1, repeat:-1, yoyo:1},
        rotation:{from:0, to:0, repeat:-1, yoyo:1},
        filter:{from:'', to:''}
    },
};
/**
 * setupParticles function
 *
 * @param {*} _containerID an HTMLElement id 
 * @param {*} _particles_class an HTMLElement class for the particle style
 * @param {*} _params particle animation parameters
 * @return {*} GSAP TimelineMax
 */
function setupParticles(_containerID, _particles_class, _params){
    var timeline = gsap.timeline({defaults:{force3D:true}});    
    if(_containerID != particleSets.id){
        var total = _params.count , container = document.getElementById(_containerID) ,
        w = container.offsetWidth , h = container.offsetHeight;
        for (var i=0 , div ; i<total; i++){ 
            div = document.createElement('div');   
            
            div.className=_particles_class;
            if(container.childElementCount < total) {
                container.appendChild(div);
                timeline.set(div, {x:`random(${_params.start.x.from}, ${_params.start.x.to}, 1)`, y:`random(${_params.start.y.from}, ${_params.start.y.to}, 1)`, opacity:`random(${_params.start.opacity.from}, ${_params.start.opacity.to})`, scale:`random(${_params.start.scale.from}, ${_params.start.scale.to})`, rotation:`random(${_params.start.rotation.from}, ${_params.start.rotation.to}, 1)`,
                            filter:_params.start.filter.from, webkitFilter:_params.start.filter.from, 
                          }, 0);
                div.params = _params;
                animateParticle(div, timeline);
            }
        };
        particleSets.id = _containerID;
    }
    timelines.push(timeline);
    return timelines;
}

/**
 * animateParticle function
 *
 * @param {*} elm single element generated by runParticles function
 * @param {*} _tl GSAP TimelineMax generated by runParticles function
 * @return {*} GSAP TimelineMax
 */
function animateParticle(elm, _tl){   
    _tl.to(elm, {duration:`random(${elm.params.duration.from}, ${elm.params.duration.to})`, y:`+=random(${elm.params.end.y.from}, ${elm.params.end.y.to}, 1)`, ease:'none', repeat:elm.params.end.y.repeat}, 0.1);
    _tl.to(elm, {duration:`random(${elm.params.duration.from}, ${elm.params.duration.to})`, x:`+=random(${elm.params.end.x.from}, ${elm.params.end.x.to}, 1)`, repeat:elm.params.end.x.repeat, yoyo:elm.params.end.x.yoyo, ease:'sine.inOut'}, 0.1);
    _tl.to(elm, {duration:`random(${elm.params.duration.from}, ${elm.params.duration.to})`, filter:elm.params.end.filter.to, webkitFilter:elm.params.end.filter.to, repeat:elm.params.end.filter.repeat, yoyo:elm.params.end.filter.yoyo, ease:'sine.inOut'}, 0.1);
    _tl.to(elm, {duration:`random(${elm.params.duration.from}, ${elm.params.duration.to})`, scale:`random(${elm.params.end.scale.from}, ${elm.params.end.scale.to})`, opacity:0, repeat:elm.params.end.scale.repeat, yoyo:elm.params.end.scale.yoyo, ease:'sine.inOut'}, 0.1);
    _tl.to(elm, {duration:`random(${elm.params.duration.from}, ${elm.params.duration.to})`, rotation:`random(${elm.params.end.rotation.from}, ${elm.params.end.rotation.to}, 1)`, repeat:elm.params.end.rotation.repeat, yoyo:elm.params.end.rotation.yoyo.repeat, ease:'sine.inOut'}, 0.1);
    return _tl;
};

/**
 * playParticles function
 *
 * @param {*} _index index of target GSAP timeline
 * @param {*} _sec specific second of the particle animation in lifecycle
 */
function playParticle(_index, _sec){
    timelines[_index].play(_sec ? _sec : timelines[_index].time());
}

/**
 * pauseParticles function
 *
 * @param {*} _index index of target GSAP timeline
 */
function pauseParticle(_index){
    timelines[_index].pause();
}

Array.prototype.isParticlesPlaying = function(){
    return this.reduce((previousValue, currentValue) => previousValue.isActive() && currentValue.isActive(), this[0]);
}
/**
 * destroyParticle function
 *
 * @param {*} _containerID HTMLElement id that contain the particles
 */
function destroyParticle(_containerID){
    document.getElementById(_containerID).innerHTML = ''; 
    particleSets = false;
}